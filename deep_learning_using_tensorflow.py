# -*- coding: utf-8 -*-
"""Deep learning Using TensorFlow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W2DpsczqbFVQn0PR2_ZNl-c1RS_-r5jr
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test,y_test) = mnist.load_data()

plt.imshow(x_train[0], cmap= "gray")
plt.show()

len(x_train[0][0])

x_train - tf.keras.utils.normalize(x_train,axis=1)
x_test - tf.keras.utils.normalize(x_test,axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

model. compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

model.fit(x= x_train, y=y_train, epochs=5)

test_loss, test_acc= model.evaluate(x=x_test,y=y_test)

test_acc

predictions= model.predict(x_test)

np.argmax(predictions[100])

plt.imshow(x_test[100], cmap= "gray")
plt.show()

